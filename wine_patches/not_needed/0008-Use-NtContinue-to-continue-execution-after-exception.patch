From 3ac50bffbadc99ff12fca9b9312e94ec2c159bdc Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 27 Jul 2018 01:26:56 -0500
Subject: [PATCH 8/9] Use NtContinue to continue execution after exceptions.

NtContinue is exported by ntdll and some programs expect it to be used to
restore the thread context after an exception handler returns
EXCEPTION_CONTINUE_EXECUTION. It must take a context as its first argument
and restore that context.

Current implementation is a simple wrapper around NtSetContextThread. It is
unlikely that it has the correct behavior if called by an external caller.

The __syscall_NtContinue wrapper is used so that it can be hooked by a
third-party.
---
 dlls/ntdll/exception.c   | 9 +++++++--
 dlls/ntdll/signal_i386.c | 3 ++-
 2 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/exception.c b/dlls/ntdll/exception.c
index d62a01c..e9c8524 100644
--- a/dlls/ntdll/exception.c
+++ b/dlls/ntdll/exception.c
@@ -311,8 +311,13 @@ ULONG WINAPI RtlRemoveVectoredExceptionHandler( PVOID handler )
  */
 NTSTATUS WINAPI NtContinue( CONTEXT *context, BOOLEAN alert )
 {
-    FIXME( "(%p, %d) stub!\n", context, alert );
-    return STATUS_NOT_IMPLEMENTED;
+    TRACE( "(%p, %d) stub!\n", context, alert );
+
+    /* NtSetContextThread will not have the intended behavior for a partial context. */
+    if ((context->ContextFlags & CONTEXT_FULL) != CONTEXT_FULL)
+        return STATUS_NOT_IMPLEMENTED;
+
+    return NtSetContextThread( GetCurrentThread(), context );
 }
 
 
diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
index 45c1f23..eac4e13 100644
--- a/dlls/ntdll/signal_i386.c
+++ b/dlls/ntdll/signal_i386.c
@@ -2605,6 +2605,7 @@ __ASM_STDCALL_FUNC( RtlUnwind, 16,
                     __ASM_CFI(".cfi_same_value %ebp\n\t")
                     "ret $16" )  /* actually never returns */
 
+NTSTATUS WINAPI __syscall_NtContinue( CONTEXT *context, BOOLEAN alert );
 
 /*******************************************************************
  *		NtRaiseException (NTDLL.@)
@@ -2612,7 +2613,7 @@ __ASM_STDCALL_FUNC( RtlUnwind, 16,
 NTSTATUS WINAPI NtRaiseException( EXCEPTION_RECORD *rec, CONTEXT *context, BOOL first_chance )
 {
     NTSTATUS status = raise_exception( rec, context, first_chance );
-    if (status == STATUS_SUCCESS) NtSetContextThread( GetCurrentThread(), context );
+    if (status == STATUS_SUCCESS) __syscall_NtContinue(context, FALSE);
     return status;
 }
 
-- 
2.7.4

