From 22fe4dfa83027aa7a888ff28b53783e836d0de8e Mon Sep 17 00:00:00 2001
From: Andrew Wesie <awesie@gmail.com>
Date: Fri, 27 Jul 2018 01:08:43 -0500
Subject: [PATCH 6/9] Refactor LdrInitializeThunk.

Since LdrInitializeThunk is exported by ntdll, its semantics may be relied on
by programs. At least one program expects that it is called whenever a new
thread is created and that the first argument is the CONTEXT for the thread.
Furthermore, it is expected that on i386 Eax will contain the thread's entry
point.

The implementation is not complete, just good enough for the one example that
we have. This patch will likely break ARM and ARM64 compilation.
---
 dlls/kernel32/process.c    |  4 +++-
 dlls/ntdll/loader.c        | 22 +++++++++-------------
 dlls/ntdll/ntdll.spec      |  3 +++
 dlls/ntdll/ntdll_misc.h    |  1 -
 dlls/ntdll/signal_i386.c   |  2 +-
 dlls/ntdll/signal_x86_64.c |  2 +-
 dlls/ntdll/thread.c        |  4 ++--
 include/winternl.h         |  2 +-
 8 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/dlls/kernel32/process.c b/dlls/kernel32/process.c
index 6799dfc..ac053e6 100644
--- a/dlls/kernel32/process.c
+++ b/dlls/kernel32/process.c
@@ -74,6 +74,8 @@ extern char **__wine_main_environ;
 static char **__wine_get_main_environment(void) { return __wine_main_environ; }
 #endif
 
+extern void __wine_ldr_start_process(void *kernel_start);
+
 typedef struct
 {
     LPSTR lpEnvAddress;
@@ -1324,7 +1326,7 @@ void CDECL __wine_kernel_init(void)
 
     if (!params->CurrentDirectory.Handle) chdir("/"); /* avoid locking removable devices */
 
-    LdrInitializeThunk( start_process_wrapper, 0, 0, 0 );
+    __wine_ldr_start_process( start_process_wrapper );
 
  error:
     ExitProcess( GetLastError() );
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index b0c1b22..c125f96 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -3523,21 +3523,22 @@ PIMAGE_NT_HEADERS WINAPI RtlImageNtHeader(HMODULE hModule)
 }
 
 
-/***********************************************************************
- *           attach_dlls
+/******************************************************************
+ *		LdrInitializeThunk (NTDLL.@)
  *
- * Attach to all the loaded dlls.
- * If this is the first time, perform the full process initialization.
  */
-NTSTATUS attach_dlls( CONTEXT *context, void **entry )
+void WINAPI LdrInitializeThunk( PCONTEXT context, ULONG_PTR unknown2,
+                                ULONG_PTR unknown3, ULONG_PTR unknown4 )
 {
     NTSTATUS status;
     WINE_MODREF *wm;
     LPCWSTR load_path = NtCurrentTeb()->Peb->ProcessParameters->DllPath.Buffer;
+    /* For convenience, we use unknown2 to pass a pointer to the entrypoint. */
+    void **entry = (void **)unknown2;
 
     pthread_sigmask( SIG_UNBLOCK, &server_block_set, NULL );
 
-    if (process_detaching) return STATUS_SUCCESS;
+    if (process_detaching) return;
 
     RtlEnterCriticalSection( &loader_section );
 
@@ -3593,7 +3594,7 @@ NTSTATUS attach_dlls( CONTEXT *context, void **entry )
     }
 
     RtlLeaveCriticalSection( &loader_section );
-    return STATUS_SUCCESS;
+    return;
 }
 
 
@@ -3706,12 +3707,7 @@ static void user_shared_data_init(void)
 }
 
 
-/******************************************************************
- *		LdrInitializeThunk (NTDLL.@)
- *
- */
-void WINAPI LdrInitializeThunk( void *kernel_start, ULONG_PTR unknown2,
-                                ULONG_PTR unknown3, ULONG_PTR unknown4 )
+void __wine_ldr_start_process( void *kernel_start )
 {
     static const WCHAR globalflagW[] = {'G','l','o','b','a','l','F','l','a','g',0};
     ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION runlevel;
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 542f9f8..7d2cd2f3 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1518,3 +1518,6 @@
 
 # User shared data
 @ cdecl __wine_user_shared_data()
+
+# Loader
+@ cdecl __wine_ldr_start_process(ptr)
diff --git a/dlls/ntdll/ntdll_misc.h b/dlls/ntdll/ntdll_misc.h
index 93f24ec..0c680f8 100644
--- a/dlls/ntdll/ntdll_misc.h
+++ b/dlls/ntdll/ntdll_misc.h
@@ -112,7 +112,6 @@ extern void *server_get_shared_memory( HANDLE thread ) DECLSPEC_HIDDEN;
 
 /* module handling */
 extern LIST_ENTRY tls_links DECLSPEC_HIDDEN;
-extern NTSTATUS attach_dlls( CONTEXT *context, void **entry ) DECLSPEC_HIDDEN;
 extern FARPROC RELAY_GetProcAddress( HMODULE module, const IMAGE_EXPORT_DIRECTORY *exports,
                                      DWORD exp_size, FARPROC proc, DWORD ordinal, const WCHAR *user ) DECLSPEC_HIDDEN;
 extern FARPROC SNOOP_GetProcAddress( HMODULE hmod, const IMAGE_EXPORT_DIRECTORY *exports, DWORD exp_size,
diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
index f0de17a..45c1f23 100644
--- a/dlls/ntdll/signal_i386.c
+++ b/dlls/ntdll/signal_i386.c
@@ -2824,7 +2824,7 @@ PCONTEXT DECLSPEC_HIDDEN attach_thread( LPTHREAD_START_ROUTINE entry, void *arg,
         init_thread_context( ctx, entry, arg, relay );
     }
     ctx->ContextFlags = CONTEXT_FULL;
-    attach_dlls( ctx, (void **)&ctx->Eax );
+    LdrInitializeThunk( ctx, (ULONG_PTR)&ctx->Eax, 0, 0 );
     return ctx;
 }
 
diff --git a/dlls/ntdll/signal_x86_64.c b/dlls/ntdll/signal_x86_64.c
index bf21b42..3818f65 100644
--- a/dlls/ntdll/signal_x86_64.c
+++ b/dlls/ntdll/signal_x86_64.c
@@ -4481,7 +4481,7 @@ PCONTEXT DECLSPEC_HIDDEN attach_thread( LPTHREAD_START_ROUTINE entry, void *arg,
         init_thread_context( ctx, entry, arg, relay );
     }
     ctx->ContextFlags = CONTEXT_FULL;
-    attach_dlls( ctx, (void **)&ctx->Rcx );
+    LdrInitializeThunk( ctx, (ULONG_PTR)&ctx->Rcx, 0, 0 );
     return ctx;
 }
 
diff --git a/dlls/ntdll/thread.c b/dlls/ntdll/thread.c
index 40304db..ba47c02 100644
--- a/dlls/ntdll/thread.c
+++ b/dlls/ntdll/thread.c
@@ -69,7 +69,7 @@ void (WINAPI *kernel32_start_process)(LPTHREAD_START_ROUTINE,void*) = NULL;
 struct startup_info
 {
     TEB                            *teb;
-    PRTL_THREAD_START_ROUTINE       entry_point;
+    LPTHREAD_START_ROUTINE         entry_point;
     void                           *entry_arg;
 };
 
@@ -691,7 +691,7 @@ static void start_thread( struct startup_info *info )
 
     signal_init_thread( teb );
     server_init_thread( info->entry_point, &suspend );
-    signal_start_thread( (LPTHREAD_START_ROUTINE)info->entry_point, info->entry_arg, suspend );
+    signal_start_thread( info->entry_point, info->entry_arg, suspend );
 }
 
 
diff --git a/include/winternl.h b/include/winternl.h
index 8924d76..42b2406 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -2347,7 +2347,7 @@ NTSYSAPI NTSTATUS  WINAPI LdrDisableThreadCalloutsForDll(HMODULE);
 NTSYSAPI NTSTATUS  WINAPI LdrFindEntryForAddress(const void*, PLDR_MODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrGetDllHandle(LPCWSTR, ULONG, const UNICODE_STRING*, HMODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrGetProcedureAddress(HMODULE, const ANSI_STRING*, ULONG, void**);
-NTSYSAPI void      WINAPI LdrInitializeThunk(void*,ULONG_PTR,ULONG_PTR,ULONG_PTR);
+NTSYSAPI void      WINAPI LdrInitializeThunk(PCONTEXT,ULONG_PTR,ULONG_PTR,ULONG_PTR);
 NTSYSAPI NTSTATUS  WINAPI LdrLoadDll(LPCWSTR, DWORD, const UNICODE_STRING*, HMODULE*);
 NTSYSAPI NTSTATUS  WINAPI LdrLockLoaderLock(ULONG,ULONG*,ULONG_PTR*);
 IMAGE_BASE_RELOCATION * WINAPI LdrProcessRelocationBlock(void*,UINT,USHORT*,INT_PTR);
-- 
2.7.4

